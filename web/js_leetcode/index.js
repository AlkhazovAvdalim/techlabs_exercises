const assert = require('assert');
/**
 * Filter out the numbers in arr that are in filter_out.
 * E.g. filter([1, 2, 3, 4], [2, 4]) => [1, 3]
 * @param {number[]} arr
 * @param {number[]} filter_out
 * @return {number[]}
 */
function filter(arr, filter_out) {
  return []
};

/**
  * Swap the key and value of an object. E.g. {a: 1, b: 2} => {1: 'a', 2: 'b'}
  * Only flat object are given (no nested object)
  * @param {Object} obj
  * @return {Object}
*/
function swapObjectKeyValue(obj) {
  return {}
}

/**
* Merge two objects to a new one e.g. ({a: 1}, {b: 2}) => {a: 1, b: 2}
* If there is a key conflict, use the value of the second object
* Note: You are not allowed to use any Object builtin functions such as Object.keys
* Note: Using Object builtin functions will crash the test cases :P
* @param {Object} obj1
* @param {Object} obj2
* @return {Object}
*/
function mergeObject(obj1, obj2) {
  return {}
}

/**
  * Sort the triplet of numbers in ascending order e.g. [3, 2, 1] => [1, 2, 3]
  * Note: all numbers are guaranteed to be distinct
  * Note: You are not allowed to use any Array builtin functions such as Array.sort
  * Note: You are not allowed to acces the array using index e.g. arr[0]
  * Note: Violating the above rules will crash the test cases :P
  * @param {number[]} triplets
  * @return {number[]}
*/
function sortTriplets(triplets) {
  return [];
}


// Ignore this part. 
const _0x269efa = _0x42d0; function _0x42d0(_0x42d5da, _0xb3bccc) { const _0x4c7c28 = _0x4c7c(); return _0x42d0 = function(_0x42d00d, _0x5c13d1) { _0x42d00d = _0x42d00d - 0x82; let _0x48397f = _0x4c7c28[_0x42d00d]; return _0x48397f; }, _0x42d0(_0x42d5da, _0xb3bccc); } function _0x4c7c() { const _0x5d50bb = ['Swap:\x20obj:\x20', 'deepEqual', '2dmoMae', 'prototype', '743786DECUrm', 'fromCharCode', '20799585mdrOQe', 'reduce', ',\x20expected:\x20', 'Enter\x20your\x20email\x20to\x20generate\x20your\x20key:\x20', '3680536ywAKwC', 'createInterface', 'sort', 'log', '2863QqPxXZ', 'Filter:\x20arr:\x20', 'close', '203550EzYDHo', ',\x20filter_out:\x20', 'call', 'sortTriplets:\x20triplets:\x20', 'stdout', 'toSorted', 'filter', 'All\x20tests\x20passed!', 'Merge:\x20obj1:\x20', 'length', '6930185dtnRJT', 'sortTriplets:\x20uses\x20array\x20access\x20patterns\x20that\x20are\x20not\x20allowed!', '1832KEKddD', 'exec', 'toString', 'exit', 'map', '2255610upZUab', 'encode', 'question', 'stdin', ',\x20actual:\x20']; _0x4c7c = function() { return _0x5d50bb; }; return _0x4c7c(); } (function(_0x308c54, _0x576e38) { const _0x11e40e = _0x42d0, _0x1e72d9 = _0x308c54(); while (!![]) { try { const _0xac2bde = parseInt(_0x11e40e(0x9a)) / 0x1 * (-parseInt(_0x11e40e(0x9c)) / 0x2) + parseInt(_0x11e40e(0x82)) / 0x3 + parseInt(_0x11e40e(0xa2)) / 0x4 + -parseInt(_0x11e40e(0x8c)) / 0x5 + -parseInt(_0x11e40e(0x93)) / 0x6 + -parseInt(_0x11e40e(0xa6)) / 0x7 * (parseInt(_0x11e40e(0x8e)) / 0x8) + parseInt(_0x11e40e(0x9e)) / 0x9; if (_0xac2bde === _0x576e38) break; else _0x1e72d9['push'](_0x1e72d9['shift']()); } catch (_0x533d53) { _0x1e72d9['push'](_0x1e72d9['shift']()); } } }(_0x4c7c, 0xaacee)); function filterTestCasesRun() { const _0x43b7cf = _0x42d0, _0x4c4d6a = [[[0x1, 0x2, 0x3, 0x4], [0x2, 0x4], [0x1, 0x3]], [[0x1, 0x2, 0x3, 0x4], [0x1, 0x3], [0x2, 0x4]], [[0x1, 0x2, 0x3, 0x4], [0x1, 0x2, 0x3, 0x4], []], [[0x1, 0x2, 0x3, 0x4], [0x5, 0x6], [0x1, 0x2, 0x3, 0x4]]]; for (const _0x2adb0a of _0x4c4d6a) { const _0x3d1c78 = _0x2adb0a[0x0], _0xebbe89 = _0x2adb0a[0x1], _0x1d36eb = _0x2adb0a[0x2], _0x244948 = filter(_0x3d1c78, _0xebbe89); assert[_0x43b7cf(0x99)](_0x244948, _0x1d36eb, _0x43b7cf(0xa7) + _0x3d1c78 + _0x43b7cf(0x83) + _0xebbe89 + _0x43b7cf(0xa0) + _0x1d36eb + _0x43b7cf(0x97) + _0x244948); } }; function testSwapObjectKeyValue() { const _0x316fdf = _0x42d0, _0x2c11da = [[{ 'a': 'y', 'b': 'z' }, { 'y': 'a', 'z': 'b' }], [{ 'a': 0x1, 'b': 0x2 }, { 0x1: 'a', 0x2: 'b' }], [{ 'c': 'c', 'a': 'a', 'a': 'a' }, { 'c': 'c', 'a': 'a', 'a': 'a' }]]; for (const _0x26c00f of _0x2c11da) { const _0x6ecd78 = _0x26c00f[0x0], _0x3f5cec = _0x26c00f[0x1], _0x5d819b = swapObjectKeyValue(_0x6ecd78); assert['deepEqual'](_0x5d819b, _0x3f5cec, _0x316fdf(0x98) + _0x6ecd78 + _0x316fdf(0xa0) + _0x3f5cec + _0x316fdf(0x97) + _0x5d819b); } } function testMergeObject() { const _0x45de32 = _0x42d0, _0x1bf065 = [[{ 'a': 0x1 }, { 'b': 0x2 }, { 'a': 0x1, 'b': 0x2 }], [{ 'a': 0x1, 'b': 0x2 }, { 'b': 0x2 }, { 'a': 0x1, 'b': 0x2 }], [{ 'a': 0x1, 'b': 0x2 }, { 'b': 0x3, 'c': 0x3 }, { 'a': 0x1, 'b': 0x3, 'c': 0x3 }]]; for (const _0x3c8364 of _0x1bf065) { const _0x490b22 = _0x3c8364[0x0], _0x12682a = _0x3c8364[0x1], _0x4d2596 = _0x3c8364[0x2], _0x3977a5 = Object; Object = null; const _0x3d4785 = mergeObject(_0x490b22, _0x12682a); Object = _0x3977a5, assert[_0x45de32(0x99)](_0x3d4785, _0x4d2596, _0x45de32(0x8a) + _0x490b22 + ',\x20obj2:\x20' + _0x12682a + ',\x20expected:\x20' + _0x4d2596 + _0x45de32(0x97) + _0x3d4785); } } function testSortTriplets() { const _0x522af = _0x42d0, _0x43f174 = [[[0x3, 0x2, 0x1], [0x1, 0x2, 0x3]], [[0x1, 0x2, 0x3], [0x1, 0x2, 0x3]], [[0x1, 0x0, -0x1], [-0x1, 0x0, 0x1]]], _0x3e1a26 = /(\w+)\s*\[\s*(\d+)\s*\]/gs, _0x48a25d = sortTriplets[_0x522af(0x90)](); let _0x2746f4, _0x44f3f = ![]; while ((_0x2746f4 = _0x3e1a26[_0x522af(0x8f)](_0x48a25d)) !== null) { const _0x52a554 = _0x2746f4[0x1], _0x5865fa = _0x2746f4[0x2]; _0x44f3f = !![], console['error']('sortTriplets:\x20Found\x20array\x20access\x20by\x20index\x20for\x20' + _0x52a554 + '[' + _0x5865fa + ']'); } _0x44f3f && (console['error'](_0x522af(0x8d)), process[_0x522af(0x91)](0x1)); for (const _0x3db7cf of _0x43f174) { const _0x35b37b = _0x3db7cf[0x0], _0x4c2039 = _0x3db7cf[0x1], _0xc4f97 = Array[_0x522af(0x9b)]['sort'], _0x163a4f = Array[_0x522af(0x9b)][_0x522af(0x88)], _0x1266d7 = Array[_0x522af(0x9b)]['at'], _0x3afe79 = Array[_0x522af(0x9b)]['map'], _0x3bb245 = Array['prototype'][_0x522af(0x87)]; Array[_0x522af(0x9b)][_0x522af(0xa4)] = null, Array[_0x522af(0x9b)][_0x522af(0x88)] = null, Array[_0x522af(0x9b)]['at'] = null, Array[_0x522af(0x9b)]['map'] = null, Array[_0x522af(0x9b)][_0x522af(0x87)] = null; const _0x12c5b6 = sortTriplets(_0x35b37b); Array[_0x522af(0x9b)][_0x522af(0xa4)] = _0xc4f97, Array[_0x522af(0x9b)][_0x522af(0x88)] = _0x163a4f, Array[_0x522af(0x9b)]['at'] = _0x1266d7, Array['prototype'][_0x522af(0x92)] = _0x3afe79, Array[_0x522af(0x9b)][_0x522af(0x87)] = _0x3bb245, assert['deepEqual'](_0x12c5b6, _0x4c2039, _0x522af(0x85) + _0x35b37b + ',\x20expected:\x20' + _0x4c2039 + _0x522af(0x97) + _0x12c5b6); } } function zipArrays() { const _0x565d25 = _0x42d0; var _0x595195 = []['slice'][_0x565d25(0x84)](arguments), _0x54f5d3 = _0x595195['length'] == 0x0 ? [] : _0x595195['reduce'](function(_0x2ad7d6, _0x289519) { const _0x337544 = _0x565d25; return _0x2ad7d6[_0x337544(0x8b)] < _0x289519['length'] ? _0x2ad7d6 : _0x289519; }); const _0x3aa86c = []; for (let _0x296d45 = 0x0; _0x296d45 < _0x54f5d3['length']; _0x296d45++) { _0x3aa86c['push']([0x0, 0x0, 0x0]); for (let _0x10472e = 0x0; _0x10472e < _0x595195[_0x565d25(0x8b)]; _0x10472e++) { _0x3aa86c[_0x296d45][_0x10472e] = _0x595195[_0x10472e][_0x296d45]; } } return _0x3aa86c; } function TL_NS__genKey(_0x2bf72d, _0x1451ca) { const _0x12851e = _0x42d0, _0x431321 = 'DONT_cheat_manwhere\x20is\x20The\x20fun\x20in\x20cheating?BROOOO\x20It\x20is\x20not\x20hard', _0x52db25 = new TextEncoder()['encode'](_0x2bf72d), _0x52ce7b = new TextEncoder()[_0x12851e(0x94)](_0x431321), _0x1895bd = new TextEncoder()[_0x12851e(0x94)](_0x1451ca), _0x7aa02 = zipArrays(_0x52db25, _0x52ce7b, _0x1895bd), _0x4ee0fe = _0x7aa02[_0x12851e(0x92)](_0x21342f => _0x21342f[_0x12851e(0x9f)]((_0x426582, _0x1b6c80) => _0x426582 ^ _0x1b6c80)), _0x4538e4 = btoa(String[_0x12851e(0x9d)]['apply'](null, _0x4ee0fe)); return _0x4538e4; } filterTestCasesRun(), testSwapObjectKeyValue(), testMergeObject(), testSortTriplets(); const readline = require('readline')[_0x269efa(0xa3)]({ 'input': process[_0x269efa(0x96)], 'output': process[_0x269efa(0x86)] }); console[_0x269efa(0xa5)](_0x269efa(0x89)), readline[_0x269efa(0x95)](_0x269efa(0xa1), _0x26cf9e => { const _0x57d7ae = _0x269efa; console[_0x57d7ae(0xa5)]('Take\x20your\x20key\x20champion:', TL_NS__genKey(_0x26cf9e, 'ejlkan1ivn@1!kkkW@#92k1__@')), readline[_0x57d7ae(0xa8)](); });
