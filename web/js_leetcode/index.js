const assert = require('assert');
/**
 * Filter out the numbers in arr that are in filter_out.
 * E.g. filter([1, 2, 3, 4], [2, 4]) => [1, 3]
 * @param {number[]} arr
 * @param {number[]} filter_out
 * @return {number[]}
 */
function filter(arr, filter_out) {
  // TODO: Implement me!
  return []
};

/**
  * Swap the key and value of an object. E.g. {a: z, b: y} => {z: 'a', y: 'b'}
  * Only flat object are given (no nested object)
  * @param {Object} obj
  * @return {Object}
*/
function swapObjectKeyValue(obj) {
  // TODO: Implement me!
  return {}
}

/**
* Merge two objects to a new one e.g. ({a: 1}, {b: 2}) => {a: 1, b: 2}
* If Key conflict, use the value of the second object
* Note: You are not allowed to use any Object builtin functions such as Object.keys
* Note: Using Object builtin functions will crash the test cases :P
* @param {Object} obj1
* @param {Object} obj2
* @return {Object}
*/
function mergeObject(obj1, obj2) {
  // TODO: Implement me!
  return {}
}

/**
  * Sort the triplet of numbers in ascending order e.g. [3, 2, 1] => [1, 2, 3]
  * Note: all numbers are guaranteed to be distinct
  * Note: You are not allowed to use any Array builtin functions such as Array.sort
  * Note: You are not allowed to acces the array using index e.g. arr[0]
  * Note: Violating the above rules will crash the test cases :P
  * @param {number[]} triplets
  * @return {number[]}
*/
function sortTriplets(triplets) {
  // TODO: Implement me!
  return []
}

const _0x1fdd85 = _0x376f; (function(_0x42ec0b, _0x747204) { const _0x1b9899 = _0x376f, _0x860cbb = _0x42ec0b(); while (!![]) { try { const _0x4f7e2d = parseInt(_0x1b9899(0xdc)) / 0x1 + -parseInt(_0x1b9899(0xd9)) / 0x2 * (parseInt(_0x1b9899(0xe9)) / 0x3) + parseInt(_0x1b9899(0xee)) / 0x4 + -parseInt(_0x1b9899(0xc1)) / 0x5 * (parseInt(_0x1b9899(0xe0)) / 0x6) + parseInt(_0x1b9899(0xc0)) / 0x7 + parseInt(_0x1b9899(0xdd)) / 0x8 * (parseInt(_0x1b9899(0xca)) / 0x9) + -parseInt(_0x1b9899(0xbd)) / 0xa * (parseInt(_0x1b9899(0xed)) / 0xb); if (_0x4f7e2d === _0x747204) break; else _0x860cbb['push'](_0x860cbb['shift']()); } catch (_0x3cd26c) { _0x860cbb['push'](_0x860cbb['shift']()); } } }(_0x193b, 0x7ac2a)); function filterTestCasesRun() { const _0x294f11 = _0x376f, _0x34f982 = [[[0x1, 0x2, 0x3, 0x4], [0x2, 0x4], [0x1, 0x3]], [[0x1, 0x2, 0x3, 0x4], [0x1, 0x3], [0x2, 0x4]], [[0x1, 0x2, 0x3, 0x4], [0x1, 0x2, 0x3, 0x4], []], [[0x1, 0x2, 0x3, 0x4], [0x5, 0x6], [0x1, 0x2, 0x3, 0x4]]]; for (const _0xc76b2a of _0x34f982) { if ('eLWHO' === _0x294f11(0xe3)) { const _0x2ccf1e = [[{ 'a': 0x1 }, { 'b': 0x2 }, { 'a': 0x1, 'b': 0x2 }], [{ 'a': 0x1, 'b': 0x2 }, { 'b': 0x2 }, { 'a': 0x1, 'b': 0x2 }], [{ 'a': 0x1, 'b': 0x2 }, { 'b': 0x3, 'c': 0x3 }, { 'a': 0x1, 'b': 0x3, 'c': 0x3 }]]; for (const _0x401054 of _0x2ccf1e) { const _0x1cb510 = _0x401054[0x0], _0x1d67ed = _0x401054[0x1], _0x1883a4 = _0x401054[0x2], _0x59c05b = _0x2525fb; _0x55f5eb = null; const _0x1c7875 = _0x151263(_0x1cb510, _0x1d67ed); _0x416494 = _0x59c05b, _0x3b3590[_0x294f11(0xe5)](_0x1c7875, _0x1883a4, _0x294f11(0xcd) + _0x1cb510 + _0x294f11(0xea) + _0x1d67ed + _0x294f11(0xcb) + _0x1883a4 + _0x294f11(0xda) + _0x1c7875); } _0x183747[_0x294f11(0xd4)](_0x294f11(0xc2)); } else { const _0x4c59f8 = _0xc76b2a[0x0], _0x500897 = _0xc76b2a[0x1], _0x414fa4 = _0xc76b2a[0x2], _0x797047 = filter(_0x4c59f8, _0x500897); assert[_0x294f11(0xe5)](_0x797047, _0x414fa4, _0x294f11(0xe4) + _0x4c59f8 + _0x294f11(0xc5) + _0x500897 + _0x294f11(0xcb) + _0x414fa4 + _0x294f11(0xda) + _0x797047); } } console[_0x294f11(0xd4)]('Filter:\x20All\x20tests\x20passed!'); } function _0x376f(_0x3daabd, _0xcf0ce7) { const _0x193be1 = _0x193b(); return _0x376f = function(_0x376f4b, _0x452d44) { _0x376f4b = _0x376f4b - 0xbb; let _0x5c032e = _0x193be1[_0x376f4b]; return _0x5c032e; }, _0x376f(_0x3daabd, _0xcf0ce7); }; function testSwapObjectKeyValue() { const _0x103406 = _0x376f, _0x1bce72 = [[{ 'a': 'y', 'b': 'z' }, { 'y': 'a', 'z': 'b' }], [{ 'c': 'c', 'a': 'a', 'a': 'a' }, { 'c': 'c', 'a': 'a', 'a': 'a' }]]; for (const _0x3c3653 of _0x1bce72) { const _0x19dd18 = _0x3c3653[0x0], _0xdba4e7 = _0x3c3653[0x1], _0x3292ce = swapObjectKeyValue(_0x19dd18); assert[_0x103406(0xe5)](_0x3292ce, _0xdba4e7, _0x103406(0xd8) + _0x19dd18 + _0x103406(0xcb) + _0xdba4e7 + _0x103406(0xda) + _0x3292ce); } console[_0x103406(0xd4)](_0x103406(0xc8)); } function testMergeObject() { const _0x3354d5 = _0x376f, _0x41fe89 = [[{ 'a': 0x1 }, { 'b': 0x2 }, { 'a': 0x1, 'b': 0x2 }], [{ 'a': 0x1, 'b': 0x2 }, { 'b': 0x2 }, { 'a': 0x1, 'b': 0x2 }], [{ 'a': 0x1, 'b': 0x2 }, { 'b': 0x3, 'c': 0x3 }, { 'a': 0x1, 'b': 0x3, 'c': 0x3 }]]; for (const _0x46145d of _0x41fe89) { if (_0x3354d5(0xc3) === _0x3354d5(0xc3)) { const _0x15e9dc = _0x46145d[0x0], _0x59adb0 = _0x46145d[0x1], _0x95ab6b = _0x46145d[0x2], _0x391e8e = Object; Object = null; const _0x11feaa = mergeObject(_0x15e9dc, _0x59adb0); Object = _0x391e8e, assert[_0x3354d5(0xe5)](_0x11feaa, _0x95ab6b, 'Merge:\x20obj1:\x20' + _0x15e9dc + _0x3354d5(0xea) + _0x59adb0 + ',\x20expected:\x20' + _0x95ab6b + _0x3354d5(0xda) + _0x11feaa); } else { const _0x1c4552 = _0x3354d5(0xcf), _0x2beebe = new _0x1fb4d8()[_0x3354d5(0xd1)](_0xed52ce), _0x3051bf = new _0x204e64()[_0x3354d5(0xd1)](_0x1c4552), _0x5a32ae = new _0x2019f5()[_0x3354d5(0xd1)](_0xe376dc), _0x394e19 = _0xe37de4(_0x2beebe, _0x3051bf, _0x5a32ae), _0x22560f = _0x394e19[_0x3354d5(0xe8)](_0x2f5bea => _0x2f5bea[_0x3354d5(0xd0)]((_0x23f414, _0xe2dd12) => _0x23f414 ^ _0xe2dd12)), _0x45d11c = _0x2299d5(_0x313d89[_0x3354d5(0xd5)]['apply'](null, _0x22560f)); return _0x45d11c; } } console[_0x3354d5(0xd4)](_0x3354d5(0xc2)); } function testSortTriplets() { const _0x249d56 = _0x376f, _0x3a7a3c = [[[0x3, 0x2, 0x1], [0x1, 0x2, 0x3]], [[0x1, 0x2, 0x3], [0x1, 0x2, 0x3]], [[0x1, 0x0, -0x1], [-0x1, 0x0, 0x1]]], _0x4a4431 = /\b\w+\s*\[\s*(\w+|\d+|[\w\d\s*+\-\/%]+)\s*\]\s*/gs, _0x38ca1e = sortTriplets['toString'](); let _0x51f54b, _0x3f3d7f = ![]; while ((_0x51f54b = _0x4a4431[_0x249d56(0xd3)](_0x38ca1e)) !== null) { _0x3f3d7f = !![], console[_0x249d56(0xd6)](_0x249d56(0xbc)); } _0x3f3d7f && (console[_0x249d56(0xd6)](_0x249d56(0xc7)), process[_0x249d56(0xbe)](0x1)); for (const _0x4f95f2 of _0x3a7a3c) { const _0x13823d = _0x4f95f2[0x0], _0x5b6ecd = _0x4f95f2[0x1], _0x11ef7a = Array['prototype']['sort'], _0x4c032a = Array['prototype'][_0x249d56(0xbb)], _0x3ab005 = Array[_0x249d56(0xec)]['at'], _0x285b37 = Array[_0x249d56(0xec)][_0x249d56(0xe8)], _0x17a772 = Array[_0x249d56(0xec)][_0x249d56(0xce)]; Array[_0x249d56(0xec)][_0x249d56(0xd7)] = null, Array[_0x249d56(0xec)][_0x249d56(0xbb)] = null, Array[_0x249d56(0xec)]['at'] = null, Array[_0x249d56(0xec)][_0x249d56(0xe8)] = null, Array[_0x249d56(0xec)][_0x249d56(0xce)] = null; const _0x36791c = sortTriplets(_0x13823d); Array[_0x249d56(0xec)][_0x249d56(0xd7)] = _0x11ef7a, Array[_0x249d56(0xec)]['filter'] = _0x4c032a, Array[_0x249d56(0xec)]['at'] = _0x3ab005, Array[_0x249d56(0xec)][_0x249d56(0xe8)] = _0x285b37, Array['prototype'][_0x249d56(0xce)] = _0x17a772, assert['deepEqual'](_0x36791c, _0x5b6ecd, _0x249d56(0xdf) + _0x13823d + ',\x20expected:\x20' + _0x5b6ecd + ',\x20actual:\x20' + _0x36791c); } console[_0x249d56(0xd4)]('sortTriplets:\x20All\x20tests\x20passed!'); } function zipArrays() { const _0x45603c = _0x376f; var _0xefcfcf = []['slice'][_0x45603c(0xbf)](arguments), _0x498e78 = _0xefcfcf[_0x45603c(0xeb)] == 0x0 ? [] : _0xefcfcf['reduce'](function(_0xa728bc, _0x1e6404) { const _0x3ac1e9 = _0x45603c; if ('EbuBT' === 'EbuBT') return _0xa728bc['length'] < _0x1e6404[_0x3ac1e9(0xeb)] ? _0xa728bc : _0x1e6404; else { const _0x23533e = [[{ 'a': 'y', 'b': 'z' }, { 'y': 'a', 'z': 'b' }], [{ 'c': 'c', 'a': 'a', 'a': 'a' }, { 'c': 'c', 'a': 'a', 'a': 'a' }]]; for (const _0x5ce064 of _0x23533e) { const _0x102311 = _0x5ce064[0x0], _0x121b6c = _0x5ce064[0x1], _0x4dfd33 = _0x56d107(_0x102311); _0x4bd81d['deepEqual'](_0x4dfd33, _0x121b6c, _0x3ac1e9(0xd8) + _0x102311 + _0x3ac1e9(0xcb) + _0x121b6c + ',\x20actual:\x20' + _0x4dfd33); } _0x3ee750['log']('Swap:\x20All\x20tests\x20passed!'); } }); const _0x1fb09b = []; for (let _0x31161e = 0x0; _0x31161e < _0x498e78[_0x45603c(0xeb)]; _0x31161e++) { if (_0x45603c(0xc9) !== _0x45603c(0xdb)) { _0x1fb09b[_0x45603c(0xcc)]([0x0, 0x0, 0x0]); for (let _0x1e8768 = 0x0; _0x1e8768 < _0xefcfcf['length']; _0x1e8768++) { if ('fbCLq' === 'fbCLq') _0x1fb09b[_0x31161e][_0x1e8768] = _0xefcfcf[_0x1e8768][_0x31161e]; else { const _0x395882 = [[[0x3, 0x2, 0x1], [0x1, 0x2, 0x3]], [[0x1, 0x2, 0x3], [0x1, 0x2, 0x3]], [[0x1, 0x0, -0x1], [-0x1, 0x0, 0x1]]], _0x174edf = /\b\w+\s*\[\s*(\w+|\d+|[\w\d\s*+\-\/%]+)\s*\]\s*/gs, _0x18f9ac = _0x5a1cf0[_0x45603c(0xde)](); let _0x200426, _0x4ae49c = ![]; while ((_0x200426 = _0x174edf[_0x45603c(0xd3)](_0x18f9ac)) !== null) { _0x4ae49c = !![], _0x2d370a['error'](_0x45603c(0xbc)); } _0x4ae49c && (_0x39663f[_0x45603c(0xd6)](_0x45603c(0xc7)), _0x239a6c[_0x45603c(0xbe)](0x1)); for (const _0x31cc5b of _0x395882) { const _0x467802 = _0x31cc5b[0x0], _0x36d82f = _0x31cc5b[0x1], _0x9056c2 = _0x48fc5c['prototype'][_0x45603c(0xd7)], _0x7df460 = _0x328c5[_0x45603c(0xec)]['filter'], _0x4a7f56 = _0x356f7d['prototype']['at'], _0x319a51 = _0x554b1[_0x45603c(0xec)][_0x45603c(0xe8)], _0x4534d2 = _0x56020e[_0x45603c(0xec)]['toSorted']; _0x7e81e9[_0x45603c(0xec)][_0x45603c(0xd7)] = null, _0x8cca83[_0x45603c(0xec)][_0x45603c(0xbb)] = null, _0x72217f['prototype']['at'] = null, _0x251ddd[_0x45603c(0xec)][_0x45603c(0xe8)] = null, _0x5300a8[_0x45603c(0xec)]['toSorted'] = null; const _0x157395 = _0x254cfe(_0x467802); _0x21231f[_0x45603c(0xec)]['sort'] = _0x9056c2, _0x5bb267[_0x45603c(0xec)]['filter'] = _0x7df460, _0x565ad4[_0x45603c(0xec)]['at'] = _0x4a7f56, _0x3e9ee7[_0x45603c(0xec)][_0x45603c(0xe8)] = _0x319a51, _0x5c8267[_0x45603c(0xec)][_0x45603c(0xce)] = _0x4534d2, _0x1edda8[_0x45603c(0xe5)](_0x157395, _0x36d82f, _0x45603c(0xdf) + _0x467802 + _0x45603c(0xcb) + _0x36d82f + _0x45603c(0xda) + _0x157395); } _0x1c70d5[_0x45603c(0xd4)]('sortTriplets:\x20All\x20tests\x20passed!'); } } } else { const _0x263d91 = _0x1c07a4[0x0], _0x559459 = _0x8b517d[0x1], _0x348488 = _0x38a9a0(_0x263d91); _0x5112ec[_0x45603c(0xe5)](_0x348488, _0x559459, _0x45603c(0xd8) + _0x263d91 + ',\x20expected:\x20' + _0x559459 + _0x45603c(0xda) + _0x348488); } } return _0x1fb09b; } function TL_NS__genKey(_0xb3e59b, _0xfe363a) { const _0x1da49b = _0x376f, _0x566f1a = _0x1da49b(0xcf), _0x1e4581 = new TextEncoder()[_0x1da49b(0xd1)](_0xb3e59b), _0x4d09bf = new TextEncoder()[_0x1da49b(0xd1)](_0x566f1a), _0x17dd1a = new TextEncoder()['encode'](_0xfe363a), _0x204c10 = zipArrays(_0x1e4581, _0x4d09bf, _0x17dd1a), _0x2a2ea9 = _0x204c10[_0x1da49b(0xe8)](_0x22e18d => _0x22e18d[_0x1da49b(0xd0)]((_0x52b7b5, _0xbbd688) => _0x52b7b5 ^ _0xbbd688)), _0x5bd016 = btoa(String['fromCharCode']['apply'](null, _0x2a2ea9)); return _0x5bd016; } filterTestCasesRun(), testSwapObjectKeyValue(), testMergeObject(), testSortTriplets(); const readline = require('readline')[_0x1fdd85(0xe2)]({ 'input': process[_0x1fdd85(0xe1)], 'output': process['stdout'] }); function _0x193b() { const _0x29dfe4 = ['push', 'Merge:\x20obj1:\x20', 'toSorted', 'DONT_cheat_manwhere\x20is\x20The\x20fun\x20in\x20cheating?BROOOO\x20It\x20is\x20not\x20hard', 'reduce', 'encode', 'question', 'exec', 'log', 'fromCharCode', 'error', 'sort', 'Swap:\x20obj:\x20', '6862vsVdNI', ',\x20actual:\x20', 'jxqbt', '996881ZyumKH', '392584FhgRZb', 'toString', 'sortTriplets:\x20triplets:\x20', '6hwRCCS', 'stdin', 'createInterface', 'qutAk', 'Filter:\x20arr:\x20', 'deepEqual', 'ejlkan1ivn@1!kkkW@#92k1__@', 'Take\x20your\x20key\x20champion:', 'map', '78fTgZkq', ',\x20obj2:\x20', 'length', 'prototype', '143duBedv', '3281536OARPIO', 'filter', 'sortTriplets:\x20Found\x20forbidden\x20array\x20access\x20pattern\x20(e.g.\x20something\x20like\x20a[i],\x20a[0],\x20a[i+1]\x20...)', '1648840OZUCtu', 'exit', 'call', '3392977QtbISX', '531275SrrPtm', 'Merge:\x20All\x20tests\x20passed!', 'PJEPa', 'All\x20tests\x20passed!', ',\x20filter_out:\x20', 'close', 'sortTriplets:\x20uses\x20array\x20access\x20patterns\x20that\x20are\x20not\x20allowed!', 'Swap:\x20All\x20tests\x20passed!', 'Tboec', '99JVzujU', ',\x20expected:\x20']; _0x193b = function() { return _0x29dfe4; }; return _0x193b(); } console[_0x1fdd85(0xd4)](_0x1fdd85(0xc4)), readline[_0x1fdd85(0xd2)]('Enter\x20your\x20email\x20to\x20generate\x20your\x20key:\x20', _0x1b61d5 => { const _0x133731 = _0x1fdd85; console[_0x133731(0xd4)](_0x133731(0xe7), TL_NS__genKey(_0x1b61d5, _0x133731(0xe6))), readline[_0x133731(0xc6)](); });
